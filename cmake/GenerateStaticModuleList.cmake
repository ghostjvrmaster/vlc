#
# Generates a header of built-in modules to be included in an executable
#  Output: <TARGET>_static-modules.h
#
macro(GenerateStaticModuleList _target _moduleList)
    get_property(previousModules CACHE "${_target}-MODULE_LIST" PROPERTY VALUE)
    set(buildHeader ON)
    if (previousModules)
        if (";${${_moduleList}};" MATCHES ";${previousModules};")
            set(buildHeader OFF)
        endif ()
    endif ()

    set("${_target}-MODULE_LIST" "${${_moduleList}}" CACHE "" STRING)

    foreach (module IN LISTS ${_moduleList})
        add_dependencies(${_target} ${module})
        target_link_libraries(${_target} ${module})

        get_target_property(moduleString ${module} MODULE_STRING)

        if (NOT moduleString)
            message(WARNING "Module missing required property: MODULE_STRING")
            continue()
        endif ()

        list(APPEND moduleStrings ${moduleString})
    endforeach ()

    if (buildHeader)
        set(modulesHeader "const void *vlc_static_modules[] = {")
        set(modulesFooter "    NULL,\n};")

        foreach (module IN LISTS moduleStrings)
            set(prototypes "${prototypes}int vlc_entry__${module} (int (*)(void *, void *, int, ...), void *);\n")
            set(modulesBody "${modulesBody}    vlc_entry__${module},\n")
        endforeach ()

        set(headerContents "/* Autogenerated header */\n${prototypes}\n${modulesHeader}\n${modulesBody}\n${modulesFooter}")

        file(WRITE ${vlc_CONFIG_H_DIR}/${_target}_static-modules.h "${headerContents}")
    endif ()
endmacro()